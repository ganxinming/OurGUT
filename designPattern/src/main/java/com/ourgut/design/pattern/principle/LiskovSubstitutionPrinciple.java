package com.ourgut.design.pattern.principle;

/**
 * @author ganxinming
 * @createDate 2022/1/8
 * @description
 * 里氏替换原则是指 如果对每一个类型为T1的对象o1，都有类型为T2的对象O2，
 * 使得以T1定义的所有程序P在所有的对象O1都替换成O2时，程序P的行为没有发生变化，那么类型T2是类型T1的子类型。
 *
 * 可以理解为一个软件实体如果适用于一个父类，那么一定适用于其子类，所有引用父类的地方必须能透明地使用其子类的对象，
 * 子类对象能够替换父类对象，而程序逻辑不变。
 * 根据这个理解，引申含义为：子类可以扩展父类的功能，但不能改变父类原有的功能。（父类出现的地方，子类一定能符合要求替换）
 *
 *
 * 可以引申出如下继承要求：
 * 1）子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法。(不能覆盖非抽象方法，)
 *
 * （2）子类可以增加自己特有的方法。
 *
 * （3）当子类的方法重载父类的方法时，方法的前置条件（即方法的输入/入参）要比父类方法的输入参数更宽松。
 *
 * （4）当子类的方法实现父类的方法时（重写/重载或实现抽象方法），方法的后置条件（即方法的输出/返回值）要比父类更严格或与父类一样。
 */
public class LiskovSubstitutionPrinciple {
}
